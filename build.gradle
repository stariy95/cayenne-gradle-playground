/*****************************************************************
 *   Licensed to the Apache Software Foundation (ASF) under one
 *  or more contributor license agreements.  See the NOTICE file
 *  distributed with this work for additional information
 *  regarding copyright ownership.  The ASF licenses this file
 *  to you under the Apache License, Version 2.0 (the
 *  "License"); you may not use this file except in compliance
 *  with the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 ****************************************************************/

plugins {
    id "java-gradle-plugin"
    id "java"
    id "maven-publish"
}

repositories {
    mavenCentral()
    mavenLocal()
}

group 'org.apache.cayenne.plugins'
version '4.0.M6-SNAPSHOT'
def cayenneVersion = version

sourceCompatibility = 1.7

gradlePlugin {
    plugins {
        cayennePlugin {
            id  = 'org.apache.cayenne'
            implementationClass = 'org.apache.cayenne.tools.GradlePlugin'
        }
    }
}

dependencies {
    compile gradleApi()
    compile group: 'org.apache.cayenne', name: 'cayenne-cgen', version: cayenneVersion
    // derby actually used for tests, but it is very hard to pass this dep elsewhere
    compile group: 'org.apache.derby', name: 'derby', version: '10.12.1.1'
    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile group: 'org.mockito', name: 'mockito-core', version: '2.7.22'
    testCompile group: 'org.apache.cayenne.build-tools', name: 'cayenne-test-utilities', version: cayenneVersion
}

// generate file with Cayenne version
task versionFile {
    def resourceOutputDir = file("$buildDir/resources/main/")
    doFirst {
        resourceOutputDir.exists() || resourceOutputDir.mkdirs()
        // file name must be in sync with GradleCayenneExtension
        def file = file("$buildDir/resources/main/cayenne.version")
        file.write(cayenneVersion.toString())
    }
}

processResources.dependsOn versionFile
